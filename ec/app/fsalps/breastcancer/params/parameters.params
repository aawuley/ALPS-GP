# Anthony Awuley
# COSC5F90 - Thesis
# Testing BREAST CANCER
# https://archive.ics.uci.edu/ml/datasets/Breast+Cancer+Wisconsin+(Diagnostic)


parent.0                = ../../../../gp/koza/koza.params
quit-on-run-complete    = false

#jobs specifies the number of runs you would wish to perform
state                   = ec.alps.GenEvolutionState
finish                  = ec.simple.SimpleFinisher
exch                    = ec.simple.SimpleExchanger
breed                   = ec.alps.ALPSBreeder
eval                    = ec.alps.ALPSEvaluator
stat                    = ec.alps.statistics.ALPSStatistics
init                    = ec.alps.fsalps.FSALPSGPInitializer
pop                     = ec.Population
jobs                    = 20
pop.subpops             = 1
pop.subpop.0.size       = 50
select.tournament.size  = 7
breed.elite.0           = 2
breedthreads            = 1
evalthreads             = 1
seed.0                  = 1
generations             = 500
cross-validation-size   = 20


#Begin ALPS configuration ==============================================================
alps.age-gap                           = 5
alps.number-of-layers                  = 10
alps.number-of-evaluations             = 2000
alps.selection-pressure                = 0.8
alps.tournament-size                   = 7
alps.aging-scheme                      = ec.alps.layers.agingscheme.Polynomial
alps.layer-replacement                 = ec.alps.layers.replacement.ReverseTournamentWorst
alps.assign-max-parent-age             = true


# when using selection pressure, individual aging isnt uniform especially when parents are selected from lower
# layer. When some individuals are aged faster than others, a population will contain less than expected required number
# ECJ by default breeds a maximum of the number of populations contained in a population.
alps.always-breed-maximum-population   = true

#when true, only individuals selected from breeding from current layer have their age increased
#else both both individuals coming from current and lower layer used as parents will have their age increased
alps.age-only-current-layer            = true

# when moving old individuals from bottom layer to next higher layer, use this flag to determine
# replacement strategy in higher layer. if false lower layer individual only replace higher layer individual
# if its fitness is better that of the higher layer individual. if true, selected tournament individual from higher
# layer is always replaced
alps.layer-replacement.replace-weakest = false

#END======================================================================================



#BEGIN FSALPS ============================================================================
#use only default node probability
alps.use-only-default-node-pr         = false

# used to determine if frequency count is used during mutation
# DEPRECATED: a simpler solutioin involves setting gp.koza.mutate.build.0 = ec.gp.koza.GrowBuilder for situations
# where mutation is to be excluded from FSALPS
alps.fsalps-in-mutation               = true

# used to determine if frequency in last layer is used to generate probality selection on a generational basis
alps.fsalps-gen-freq-count            = false

# when enabled, nodes are counted in all layers and converted
# to probability values used during mutation and tree initialization in bottom layer
alps.fsalps-count-all-layers            = true

# Determine which frequency selection criteria is used for generating probability
alps.fsalps.probability-selection     = ec.alps.fsalps.probability.NormalFrequency


#ec.gp.koza.koza.params

# Point Mutation will use Tournament Selection, try only 1
# time, have a max depth of 17, and use KozaNodeSelector
# and GROW for building.  Also, Point Mutation uses a GrowBuilder
# by default, with a default of min-depth=max-depth=5
# as shown a ways below
gp.koza.mutate.source.0      = ec.select.TournamentSelection
gp.koza.mutate.ns.0          = ec.gp.koza.KozaNodeSelector
gp.koza.mutate.build.0       = ec.alps.gp.koza.GrowBuilder
gp.koza.mutate.maxdepth      = 17
# This is the default for Koza and lil-gp, though it's
# a little wimpy; on the other hand, a higher number can
# make things really slow
gp.koza.mutate.tries         = 1


# The tree uses an ec.gp.koza.HalfBuilder to create
# itself initially.
# HalfBuilder will pick GROW half the time and FULL
# the other half, with a ramp from 2 to 6 inclusive.
# By ramp we mean that it first picks a random number between
# 2 and 6 inclusive.  This then becomes the *maximum* tree size
# (for the FULL approach, it's the tree size of the tree, for
# GROW, the tree can get no bigger than this)

#This is to ensure that the modified KozaBuilder and GrowBuilder in alps.gp.koza are used during tree initialization
gp.tc.0.init                 = ec.alps.gp.koza.HalfBuilder

# We set the default for HalfBuilder to be a ramp of 2--6,
# with a grow probability of 0.5
gp.koza.half.min-depth       = 2
gp.koza.half.max-depth       = 6
gp.koza.half.growp           = 0.5

#END FSALPS =========================================================================


#Begin GP parameters ================================================================
pop.subpop.0.species.pipe                        = ec.alps.gp.ALPSMultiBreedingPipeline
pop.subpop.0.species.pipe.num-sources            = 2
pop.subpop.0.species.pipe.source.0               = ec.alps.gp.breed.Crossover
pop.subpop.0.species.pipe.source.0.source.0      = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.0.source.1      = same
pop.subpop.0.species.pipe.source.0.ns.0          = ec.gp.koza.KozaNodeSelector
pop.subpop.0.species.pipe.source.0.ns.1          = same
pop.subpop.0.species.pipe.source.0.maxdepth      = 17
pop.subpop.0.species.pipe.source.0.tries         = 1
# pop.subpop.0.species.pipe.source.0.source.0.size = 7
# pop.subpop.0.species.pipe.source.0.source.1.size = 7
pop.subpop.0.species.pipe.source.0.prob          = 0.90

pop.subpop.0.species.pipe.source.1               = ec.alps.gp.breed.Mutation
pop.subpop.0.species.pipe.source.0.source.0      = ec.select.TournamentSelection
# pop.subpop.0.species.pipe.source.0.source.0.size = 7
pop.subpop.0.species.pipe.source.1.prob          = 0.10

#Node Selectors
gp.koza.ns.terminals                             = 0.1
gp.koza.ns.nonterminals                          = 0.9
gp.koza.ns.root                                  = 0.0
#END================================================================================= 


#Begin NODES ========================================================================
gp.nc.size        = 3

gp.nc.0           = ec.gp.GPNodeConstraints
gp.nc.0.name      = nc0
gp.nc.0.returns   = nil
gp.nc.0.size      = 0

gp.nc.1           = ec.gp.GPNodeConstraints
gp.nc.1.name      = nc1
gp.nc.1.returns   = nil
gp.nc.1.size      = 1
gp.nc.1.child.0   = nil

gp.nc.2           = ec.gp.GPNodeConstraints
gp.nc.2.name      = nc2
gp.nc.2.returns   = nil
gp.nc.2.size      = 2
gp.nc.2.child.0   = nil
gp.nc.2.child.1   = nil


# Assign all function/terminal set to the GP primitive set.
# NB: Added function set: Div, Max & Min
gp.fs.size         = 1
gp.fs.0            = ec.alps.fsalps.FSALPSGPFunctionSet
gp.fs.0.name       = f0

gp.fs.0.size        =   39
gp.fs.0.func.0		=	ec.app.fsalps.breastcancer.ts.WDBC2
gp.fs.0.func.0.nc	=	nc0		
gp.fs.0.func.1		=	ec.app.fsalps.breastcancer.ts.WDBC3
gp.fs.0.func.1.nc	=	nc0		
gp.fs.0.func.2		=	ec.app.fsalps.breastcancer.ts.WDBC4
gp.fs.0.func.2.nc	=	nc0		
gp.fs.0.func.3		=	ec.app.fsalps.breastcancer.ts.WDBC5
gp.fs.0.func.3.nc	=	nc0		
gp.fs.0.func.4		=	ec.app.fsalps.breastcancer.ts.WDBC6
gp.fs.0.func.4.nc	=	nc0		
gp.fs.0.func.5		=	ec.app.fsalps.breastcancer.ts.WDBC7
gp.fs.0.func.5.nc	=	nc0		
gp.fs.0.func.6		=	ec.app.fsalps.breastcancer.ts.WDBC8
gp.fs.0.func.6.nc	=	nc0		
gp.fs.0.func.7		=	ec.app.fsalps.breastcancer.ts.WDBC9
gp.fs.0.func.7.nc	=	nc0		
gp.fs.0.func.8		=	ec.app.fsalps.breastcancer.ts.WDBC10
gp.fs.0.func.8.nc	=	nc0		
gp.fs.0.func.9		=	ec.app.fsalps.breastcancer.ts.WDBC11
gp.fs.0.func.9.nc	=	nc0		
gp.fs.0.func.10		=	ec.app.fsalps.breastcancer.ts.WDBC12
gp.fs.0.func.10.nc	=	nc0		
gp.fs.0.func.11		=	ec.app.fsalps.breastcancer.ts.WDBC13
gp.fs.0.func.11.nc	=	nc0		
gp.fs.0.func.12		=	ec.app.fsalps.breastcancer.ts.WDBC14
gp.fs.0.func.12.nc	=	nc0		
gp.fs.0.func.13		=	ec.app.fsalps.breastcancer.ts.WDBC15
gp.fs.0.func.13.nc	=	nc0		
gp.fs.0.func.14		=	ec.app.fsalps.breastcancer.ts.WDBC16
gp.fs.0.func.14.nc	=	nc0		
gp.fs.0.func.15		=	ec.app.fsalps.breastcancer.ts.WDBC17
gp.fs.0.func.15.nc	=	nc0		
gp.fs.0.func.16		=	ec.app.fsalps.breastcancer.ts.WDBC18
gp.fs.0.func.16.nc	=	nc0		
gp.fs.0.func.17		=	ec.app.fsalps.breastcancer.ts.WDBC19
gp.fs.0.func.17.nc	=	nc0		
gp.fs.0.func.18		=	ec.app.fsalps.breastcancer.ts.WDBC20
gp.fs.0.func.18.nc	=	nc0		
gp.fs.0.func.19		=	ec.app.fsalps.breastcancer.ts.WDBC21
gp.fs.0.func.19.nc	=	nc0		
gp.fs.0.func.20		=	ec.app.fsalps.breastcancer.ts.WDBC22
gp.fs.0.func.20.nc	=	nc0		
gp.fs.0.func.21		=	ec.app.fsalps.breastcancer.ts.WDBC23
gp.fs.0.func.21.nc	=	nc0		
gp.fs.0.func.22		=	ec.app.fsalps.breastcancer.ts.WDBC24
gp.fs.0.func.22.nc	=	nc0		
gp.fs.0.func.23		=	ec.app.fsalps.breastcancer.ts.WDBC25
gp.fs.0.func.23.nc	=	nc0		
gp.fs.0.func.24		=	ec.app.fsalps.breastcancer.ts.WDBC26
gp.fs.0.func.24.nc	=	nc0		
gp.fs.0.func.25		=	ec.app.fsalps.breastcancer.ts.WDBC27
gp.fs.0.func.25.nc	=	nc0		
gp.fs.0.func.26		=	ec.app.fsalps.breastcancer.ts.WDBC28
gp.fs.0.func.26.nc	=	nc0		
gp.fs.0.func.27		=	ec.app.fsalps.breastcancer.ts.WDBC29
gp.fs.0.func.27.nc	=	nc0		
gp.fs.0.func.28		=	ec.app.fsalps.breastcancer.ts.WDBC30
gp.fs.0.func.28.nc	=	nc0		
gp.fs.0.func.29		=	ec.app.fsalps.breastcancer.ts.WDBC31
gp.fs.0.func.29.nc	=	nc0		
gp.fs.0.func.30     =   ec.app.fsalps.breastcancer.ts.RegERC
gp.fs.0.func.30.nc  =   nc0	

gp.fs.0.func.31     = ec.app.fsalps.breastcancer.fs.Add
gp.fs.0.func.31.nc  = nc2
gp.fs.0.func.32     = ec.app.fsalps.breastcancer.fs.Sub
gp.fs.0.func.32.nc  = nc2
gp.fs.0.func.33     = ec.app.fsalps.breastcancer.fs.Mul
gp.fs.0.func.33.nc  = nc2
gp.fs.0.func.34     = ec.app.fsalps.breastcancer.fs.Div
gp.fs.0.func.34.nc  = nc2
gp.fs.0.func.35     = ec.app.fsalps.breastcancer.fs.Max
gp.fs.0.func.35.nc  = nc2
gp.fs.0.func.36     = ec.app.fsalps.breastcancer.fs.Min
gp.fs.0.func.36.nc  = nc2
gp.fs.0.func.37     = ec.app.fsalps.breastcancer.fs.Ln
gp.fs.0.func.37.nc  = nc1
gp.fs.0.func.38     = ec.app.fsalps.breastcancer.fs.Log10
gp.fs.0.func.38.nc  = nc1


#END================================================================================= 

eval.problem       = ec.app.fsalps.breastcancer.BreastCancer
eval.problem.data  = ec.app.fsalps.breastcancer.DoubleData
# shuffle data when a cycle of kfold cross validation is completed
# when not shuffled, this will be like testing the same data sample
# n times. where n = jobs/cross-validation-size
eval.problem.kfold-cycle-data-shuffle = true

eval.problem.wdbc-all        = /Users/anthony/git/ecj22/ec/app/fsalps/breastcancer/data/wdbc-all.data
eval.problem.wdbc-clean      = /Users/anthony/git/ecj22/ec/app/fsalps/breastcancer/data/wdbc-new.data
eval.problem.wdbc-train-data = /Users/anthony/git/ecj22/ec/app/fsalps/breastcancer/data/wdbc-train.data
eval.problem.wdbc-test-data  = /Users/anthony/git/ecj22/ec/app/fsalps/breastcancer/data/wdbc-test.data

eval.problem.total-number-of-points        = 168

#Specification of output statistics files

stat.num-children           = 3
stat.child.0                = ec.alps.statistics.ShortStatistics
stat.child.0.gather-full    = true
stat.child.0.file           = ../output/cmtrx.stats
stat.child.1                = ec.alps.statistics.ALPSStatistics
stat.child.1.silent.print   = true
stat.child.1.file           = ../output/ss.stats
stat.child.2                = ec.alps.statistics.NodeStatistics
stat.child.2.silent.print   = true
stat.child.2.file           = ../output/node.stats
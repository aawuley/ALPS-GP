# Copyright 2014 by Anthony Awuley - Brock University
# Licensed under the Academic Free License version 3.0
# See the file "LICENSE" for more information

parent.0                = ../../../../gp/koza/koza.params
quit-on-run-complete    = false

#jobs specifies the number of runs you would wish to perform
state                   = ec.alps.GenEvolutionState
finish                  = ec.simple.SimpleFinisher
exch                    = ec.simple.SimpleExchanger
breed                   = ec.alps.ALPSBreeder
eval                    = ec.alps.ALPSEvaluator
stat                    = ec.alps.statistics.ALPSStatistics
init                    = ec.alps.fsalps.FSALPSGPInitializer
pop                     = ec.Population
jobs                    = 2
pop.subpops             = 1
pop.subpop.0.size       = 100
select.tournament.size  = 4
breed.elite.0           = 3
breedthreads            = 1
evalthreads             = 1
seed.0                  = 1
quit-on-run-complete    = false
generations             = 100


#ALPS configuration ====================================================================
alps.age-gap                           = 5
alps.number-of-layers                  = 5
alps.number-of-evaluations             = 100
alps.aging-scheme                      = ec.alps.layers.agingscheme.Polynomial
alps.layer-replacement                 = ec.alps.layers.replacement.ReverseTournamentWorst

# when using selection pressure, individual aging isn't uniform especially when parents are selected from lower
# layer. When some individuals are aged faster than others, a population will contain less than expected required number
# ECJ by default breeds a maximum of the number of populations contained in a population.
alps.always-breed-maximum-population   = true

#when true, only individuals selected from breeding from current layer have their age increased
#else both both individuals coming from current and lower layer used as parents will have their age increased
alps.age-only-current-layer            = false

# when moving old individuals from bottom layer to next higher layer, use this flag to determine
# replacement strategy in higher layer. if false lower layer individual only replace higher layer individual
# if its fitness is better that of the higher layer individual. if true, selected tournament individual from higher
# layer is always replaced
alps.layer-replacement.replace-weakest = false

alps.selection-pressure                = 0.8
alps.tournament-size                   = 4
#=========================================================================================



#FSALPS ==================================================================================
#use only default node probability
alps.use-only-default-node-pr    = false

# used to determine if frequency count is used during mutation
# DEPRECATED: a simpler solution involves setting gp.koza.mutate.build.0       = ec.gp.koza.GrowBuilder for situations
# where mutation is to be excluded from FSALPS
alps.fsalps-in-mutation          = true

#when true, only individuals selected from breeding from current layer have their age increased
#else both both individuals coming from current and lower layer used as parents will have their age increased
alps.age-only-current-layer      = false

#used to determine if frequency in last layer is used to generate probality selection on a generational basis
alps.fsalps-last-layer-gen-freq-count = false

# when enabled, nodes are counted in all layers and converted
# to probability values used during mutation and tree initialization in bottom layer
alps.fsalps-use-all-layers            = true


#ec.gp.koza.koza.params

# Point Mutation will use Tournament Selection, try only 1
# time, have a max depth of 17, and use KozaNodeSelector
# and GROW for building.  Also, Point Mutation uses a GrowBuilder
# by default, with a default of min-depth=max-depth=5
# as shown a ways below
gp.koza.mutate.source.0      = ec.select.TournamentSelection
gp.koza.mutate.ns.0          = ec.gp.koza.KozaNodeSelector
gp.koza.mutate.build.0      = ec.alps.gp.koza.GrowBuilder
#gp.koza.mutate.build.0       = ec.gp.koza.GrowBuilder
gp.koza.mutate.maxdepth      = 17
# This is the default for Koza and lil-gp, though it's
# a little wimpy; on the other hand, a higher number can
# make things really slow
gp.koza.mutate.tries         = 1


# The tree uses an ec.gp.koza.HalfBuilder to create
# itself initially.
# HalfBuilder will pick GROW half the time and FULL
# the other half, with a ramp from 2 to 6 inclusive.
# By ramp we mean that it first picks a random number between
# 2 and 6 inclusive.  This then becomes the *maximum* tree size
# (for the FULL approach, it's the tree size of the tree, for
# GROW, the tree can get no bigger than this)

gp.tc.0.init                 = ec.alps.gp.koza.HalfBuilder

# We set the default for HalfBuilder to be a ramp of 2--6,
# with a grow probability of 0.5
gp.koza.half.min-depth       = 2
gp.koza.half.max-depth       = 6
gp.koza.half.growp           = 0.5

#=========================================================================================


#GP Parameters =========================================================================== 
pop.subpop.0.species.pipe                        = ec.alps.gp.ALPSMultiBreedingPipeline
pop.subpop.0.species.pipe.num-sources            = 2
pop.subpop.0.species.pipe.source.0               = ec.alps.gp.breed.Crossover
pop.subpop.0.species.pipe.source.0.source.0      = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.0.source.1      = same
pop.subpop.0.species.pipe.source.0.ns.0          = ec.gp.koza.KozaNodeSelector
pop.subpop.0.species.pipe.source.0.ns.1          = same
pop.subpop.0.species.pipe.source.0.maxdepth      = 17
pop.subpop.0.species.pipe.source.0.tries         = 1
pop.subpop.0.species.pipe.source.0.source.0.size = 7
pop.subpop.0.species.pipe.source.0.source.1.size = 7
pop.subpop.0.species.pipe.source.0.prob          = 0.90

pop.subpop.0.species.pipe.source.1               = ec.alps.gp.breed.Mutation
pop.subpop.0.species.pipe.source.0.source.0      = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.0.source.0.size = 7
pop.subpop.0.species.pipe.source.1.prob          = 0.10

#Node Selectors
gp.koza.ns.terminals                             = 0.1
gp.koza.ns.nonterminals                          = 0.9
gp.koza.ns.root                                  = 0.0
#=========================================================================================


# the next four items are already defined in koza.params, but we
# put them here to be clear.

gp.koza.mutate.source.0 = ec.select.TournamentSelection

# We have one function set, of class GPFunctionSet
gp.fs.size              = 1
gp.fs.0                 = ec.alps.fsalps.FSALPSGPFunctionSet
# We'll call the function set "f0".
gp.fs.0.name            = f0

# We have five functions in the function set.  They are:
gp.fs.0.size            = 13
gp.fs.0.func.0          = ec.app.fsalps.lab10.ts.Q
gp.fs.0.func.0.nc       = nc0
gp.fs.0.func.0.pr       = 0
gp.fs.0.func.1          = ec.app.fsalps.lab10.ts.R
gp.fs.0.func.1.nc       = nc0
gp.fs.0.func.1.pr       = 0
gp.fs.0.func.2          = ec.app.fsalps.lab10.ts.S
gp.fs.0.func.2.nc       = nc0
gp.fs.0.func.2.pr       = 0
gp.fs.0.func.3          = ec.app.fsalps.lab10.ts.T
gp.fs.0.func.3.nc       = nc0
gp.fs.0.func.3.pr       = 0
gp.fs.0.func.4          = ec.app.fsalps.lab10.ts.U
gp.fs.0.func.4.nc       = nc0
gp.fs.0.func.4.pr       = 0
gp.fs.0.func.5          = ec.app.fsalps.lab10.ts.V
gp.fs.0.func.5.nc       = nc0
gp.fs.0.func.5.pr       = 0
gp.fs.0.func.6          = ec.app.fsalps.lab10.ts.W
gp.fs.0.func.6.nc       = nc0
gp.fs.0.func.6.pr       = 0
gp.fs.0.func.7          = ec.app.fsalps.lab10.ts.X
gp.fs.0.func.7.nc       = nc0
gp.fs.0.func.7.pr       = 0
gp.fs.0.func.8          = ec.app.fsalps.lab10.ts.Y
gp.fs.0.func.8.nc       = nc0
gp.fs.0.func.8.pr       = 0
gp.fs.0.func.9          = ec.app.fsalps.lab10.ts.Z
gp.fs.0.func.9.nc       = nc0
gp.fs.0.func.9.pr       = 0
gp.fs.0.func.10         = ec.app.fsalps.lab10.fs.Add
gp.fs.0.func.10.nc      = nc2
gp.fs.0.func.11         = ec.app.fsalps.lab10.fs.Sub
gp.fs.0.func.11.nc      = nc2
gp.fs.0.func.12         = ec.app.fsalps.lab10.fs.Mul
gp.fs.0.func.12.nc      = nc2

eval.problem            = ec.app.fsalps.lab10.MultiValuedRegression
eval.problem.data       = ec.app.fsalps.lab10.DoubleData

#Specification of output statistics files
stat.num-children           = 3
stat.child.0                = ec.alps.statistics.ShortStatistics
stat.child.0.file           = ../output/cmtrx.stats
stat.child.1                = ec.alps.statistics.ALPSStatistics
stat.child.1.silent.print   = true
stat.child.1.file           = ../output/ss.stats
stat.child.2                = ec.alps.statistics.NodeStatistics
stat.child.2.silent.print   = true
stat.child.2.file           = ../output/node.stats

# Copyright 2014 by Anthony Awuley and Brock University
# Licensed under the Academic Free License version 3.0
# See the file "LICENSE" for more information

parent.0                = ../../../../gp/koza/koza.params
quit-on-run-complete    = false

#jobs specifies the number of runs you would wish to perform
state                   = ec.alps.SimpleEvolutionState
finish                  = ec.simple.SimpleFinisher
exch                    = ec.simple.SimpleExchanger
breed                   = ec.alps.SimpleBreederALPS
eval                    = ec.alps.SimpleEvaluator
stat                    = ec.alps.SimpleStatistics
init                    = ec.gp.GPInitializer
pop                     = ec.Population
jobs                    = 1
pop.subpops             = 1
pop.subpop.0.size       = 100
select.tournament.size  = 4
breed.elite.0           = 3
breedthreads            = 1
evalthreads             = 1
seed.0                  = 1
quit-on-run-complete    = false
generations             = 200


#================================ ALPS configuration ================================ 
alps.age-gap                           = 20
alps.number-of-layers                  = 10
alps.number-of-evaluations             = 100
alps.aging-scheme                      = ec.alps.layers.agingscheme.Polynomial
alps.layer-replacement                 = ec.alps.layers.replacement.ReverseTournamentWorst
alps.selection-pressure                = 0.8
alps.tournament-size                   = 4
alps.layer-replacement.replace-weakest = false;

# when using selection pressure, individual aging isnt unifrom especially when parents are selected from lower
# layer. When some individuals are aged faster than others, a population will contain less than expected required number
# ECJ by default breeds a maximu of the number of populations contained in a population.
alps.always-breed-maximum-population   = true

#when true, only individuals selected fro breeding from current layer have their age increased
#else both both individuals coming from current and lower layer used as parents will have their age increased
alps.age-only-current-layer            = true

# when moving old individuals from bottom layer to next higher layer, use this flag to determine
# replacement strategy in higher layer. if false lower layer individual only replace higher layer individual
# if its fitness is better that of the higher layer individual. if true, selected tournament individual from higher
# layer is always replaced
alps.layer-replacement.replace-weakest = false
#==================================================================================== 


pop.subpop.0.species.pipe                        = ec.alps.gp.MultiBreedingPipelineALPS
pop.subpop.0.species.pipe.num-sources            = 2
pop.subpop.0.species.pipe.source.0               = ec.alps.gp.breed.CrossoverALPS
pop.subpop.0.species.pipe.source.0.source.0      = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.0.source.1      = same
pop.subpop.0.species.pipe.source.0.ns.0          = ec.gp.koza.KozaNodeSelector
pop.subpop.0.species.pipe.source.0.ns.1          = same
pop.subpop.0.species.pipe.source.0.maxdepth      = 17
pop.subpop.0.species.pipe.source.0.tries         = 1
pop.subpop.0.species.pipe.source.0.source.0.size = 7
pop.subpop.0.species.pipe.source.0.source.1.size = 7
pop.subpop.0.species.pipe.source.0.prob          = 0.90

pop.subpop.0.species.pipe.source.1               = ec.alps.gp.breed.MutationALPS
pop.subpop.0.species.pipe.source.0.source.0      = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.0.source.0.size = 7
pop.subpop.0.species.pipe.source.1.prob          = 0.10

#pop.subpop.0.species.pipe.source.1              = ec.breed.ReproductionPipeline
#pop.subpop.0.species.crossover-prob             = 0.9
#pop.subpop.0.species.mutation-prob              = 0.00

#Node Selectors
gp.koza.ns.terminals                             = 0.1
gp.koza.ns.nonterminals                          = 0.9
gp.koza.ns.root                                  = 0.0


# the next four items are already defined in koza.params, but we
# put them here to be clear.

gp.koza.mutate.source.0 = ec.select.TournamentSelection

# We have one function set, of class GPFunctionSet
gp.fs.size              = 1
gp.fs.0                 = ec.gp.GPFunctionSet
# We'll call the function set "f0".
gp.fs.0.name            = f0

# We have five functions in the function set.  They are:
gp.fs.0.size            = 5
gp.fs.0.func.0          = ec.app.alps.alpslab.ts.X
gp.fs.0.func.0.nc       = nc0
gp.fs.0.func.1          = ec.app.alps.alpslab.ts.Y
gp.fs.0.func.1.nc       = nc0
gp.fs.0.func.2          = ec.app.alps.alpslab.fs.Add
gp.fs.0.func.2.nc       = nc2
gp.fs.0.func.3          = ec.app.alps.alpslab.fs.Sub
gp.fs.0.func.3.nc       = nc2
gp.fs.0.func.4          = ec.app.alps.alpslab.fs.Mul
gp.fs.0.func.4.nc       = nc2

eval.problem            = ec.app.alps.alpslab.MultiValuedRegression
eval.problem.data       = ec.app.alps.alpslab.DoubleData

stat.num-children       = 2
stat.child.0            = ec.alps.SimpleShortStatistics
stat.child.0.file       = ../output/out.stats
stat.child.1            = ec.alps.NodeSimpleStatistics
stat.child.1.file       = ../output/ind.stats

{
  "name": "ALPS & FSALPS ECJ",
  "tagline": "Integration of ALPS and FSALPS  into ECJ",
  "body": "## Welcome ALPS and FSALPS Evolutionary Computation in Java!\r\n\r\n***\r\n\r\nThe system provides an  ALPS and FSALPS extension to the open so ECJ System\r\n\r\nCopyright 2015 by Anthony Awuley \r\nBrock University Computer Science Department\r\nLicensed under the Academic Free License version 3.0\r\nSee the file \"LICENSE\" for more information\r\n\r\n> The ALPS[Hornby,2006] strategy is a diversity–enhancing algorithm that works with algorithms \r\n> with elements of randomness in them . It uses an age–layered population and restricts breeding \r\n> and competition between individuals. ALPS ability to maintain diversity in its population is largely \r\n> due to regular introduction of individuals from different fitness basins and the novel control of \r\n> competition between individuals. \r\n\r\nThe implementation is based on the version 22 of the open source Evolutionary Computation system in Java\r\ndeveloped by Sean Luke [ECJ,V22]\r\n\r\n[Hornby,2006] Gregory Hornby. Alps: the age-layered population structure for reducing the problem of \r\npremature convergence. In Mike Cattolico, editor, GECCO, pages 815–822. ACM, 2006.\r\n\r\n[ECJ,V22] S. Luke, G. Balan S. Paus Z. Skolicki E. Popovici J. Harrison J. Bassett R. Hubley, L. Panait and \r\nA. Chhircop. Ecj: A java-based evolutionary computation research system, version 22, 06 2000-2015. \r\nhttp://www.cs.gmu.edu/~eclab/projects/ecj/ [Online; Accessed: 2 April 2014].\r\n____\r\n\r\n## Start here for GA\r\nThe parameter files are located in the directory  io/params/ and the main class is in ec.main.Run.\r\nThree tutorials have been set up and can be found in the directories\r\n\r\n1. ec/app/alps/tutorial2/ \r\n2. ec/app/alps/tutorial1/\r\n3. ec/app/alps/tutorial3/\r\n4. ec/app/fsalps/tutorial4/\r\n\r\nA brief introduction is given to setting up **1** and **2**.\r\n\r\n### Setting up ALPS GP (see ec/app/alps/tutorial2/params/tutorial2.params). \r\n\r\n> only alps related changes are discussed. For full descrption of all related parameters, see tutorial4 of the [ECJ system](https://cs.gmu.edu/~eclab/projects/ecj/)\r\n\r\n* parent.0                = ../../../../gp/koza/koza.params\r\n* #ALPS configuration \r\n* parent.1                = ../../../../alps/alps.params\r\n* quit-on-run-complete    = false\r\n* #jobs specifies the number of runs you would wish to perform\r\n* state                   = ec.alps.GenEvolutionState\r\n* exch                    = ec.simple.SimpleExchanger\r\n* breed                   = ec.alps.ALPSBreeder\r\n* eval                    = ec.alps.ALPSEvaluator\r\n* stat                    = ec.alps.statistics.ALPSStatistics\r\n\r\n### FUNCTION SETS\r\n* \r\n* \r\n\r\n================\r\n\r\n**Content of directory              = ../../../../alps/alps.params**\r\n\r\n### jobs specifies the number of runs you would wish to perform\r\n* state                                 = ec.alps.GenEvolutionState\r\n* breed                                 = ec.alps.ALPSBreeder\r\n* eval                                  = ec.alps.ALPSEvaluator\r\n* stat                                  = ec.alps.statistics.ALPSStatistics\r\n* alps.age-gap                           = 5\r\n* alps.number-of-layers                  = 5\r\n* alps.number-of-evaluations             = 2000\r\n* alps.selection-pressure                = 0.8\r\n* alps.tournament-size                   = 4\r\n* alps.aging-scheme                      = ec.alps.layers.agingscheme.Polynomial\r\n* alps.layer-replacement                 = ec.alps.layers.replacement.ReverseTournamentWorst\r\n* alps.assign-max-parent-age             = true\r\n\r\n> when using selection pressure, individual aging isnt uniform especially when parents are selected from lower layer. When some individuals are aged faster than others, a population will contain less than expected required number ECJ by default breeds a maximum of the number of populations contained in a population.\r\n* alps.always-breed-maximum-population   = true\r\n\r\nwhen true, only individuals selected from breeding from current layer have their age increased\r\nelse both both individuals coming from current and lower layer used as parents will have their age increased\r\n* alps.age-only-current-layer            = true\r\n\r\n> when moving old individuals from bottom layer to next higher layer, use this flag to determine\r\n> replacement strategy in higher layer. if false lower layer individual only replace higher layer tournament individual\r\n> if its fitness is better that of the higher layer tournament individual. if true, selected tournament individual from higher\r\n> layer is always replaced\r\n* alps.layer-replacement.replace-weakest = true\r\n* pop.subpop.0.species.pipe                        = ec.alps.gp.ALPSMultiBreedingPipeline\r\n* pop.subpop.0.species.pipe.source.0               = ec.alps.gp.breed.Crossover\r\n* pop.subpop.0.species.pipe.source.1               = ec.alps.gp.breed.Mutation\r\n\r\n## SAMPLE OUTPUT\r\n\r\nALPS GP with 6 Layers using Generational Replacement strategy\r\n![ALPS GP with 6 Layers using Generational Replacement strategy](http://greyintel.org/resources/img/works/gp/generationalPolynomial.png)\r\n\r\n================\r\n\r\nComparing performance plot of last layers of ALPS and Canonical GP\r\n![Comparing performance plot of last layers of ALPS and Canonical GP](http://greyintel.org/resources/img/works/gp/comparegp.png)\r\n\r\nALPS  Vector Representation with 6 Steady State Polynomial age layer\r\n![ALPS  Vector Representation with 6 Steady State Polynomial age layer]![ALPS  Vector Representation with 6 Steady State Polynomial age layer](http://greyintel.org/resources/img/works/alps/ga/gasspolynomial.png)\r\n\r\n================\r\n\r\nALPS  Vector Representation Generational with Polynomial age layer\r\n![ALPS  Vector Representation Generational with Polynomial age layer](http://greyintel.org/resources/img/works/alps/ga/gagenpolynomial.png)\r\n\r\n================\r\n\r\n### FSALPS Configuration\r\n\r\n**Content of directory              = ../../../../fsalps/fsalps.params**\r\n\r\n* init                                  = ec.alps.fsalps.FSLPSGPInitializer\r\n\r\nuse only default node probability\r\n* alps.use-only-default-node-pr         = false\r\n\r\nused to determine if frequency in last layer is used to generate probality selection on a generational basis\r\n* alps.fsalps-gen-freq-count            = false\r\n\r\n when enabled, nodes are counted in all layers and converted\r\n to probability values used during mutation and tree initialization in bottom layer\r\n* alps.fsalps-count-all-layers          = true\r\n\r\n Determine which frequency selection criteria is used for generating probability\r\n* alps.fsalps.probability-selection     = ec.alps.fsalps.probability.NormalFrequency\r\n\r\n Point Mutation will use Tournament Selection\r\n* gp.koza.mutate.source.0      = ec.select.TournamentSelection\r\n* gp.koza.mutate.ns.0          = ec.gp.koza.KozaNodeSelector\r\n* gp.koza.mutate.build.0       = ec.alps.fsalps.gp.koza.GrowBuilder\r\n\r\nThis is to ensure that the modified KozaBuilder and GrowBuilder in alps.gp.koza are used during tree initialization\r\n* gp.tc.0.init                 = ec.alps.fsalps.gp.koza.HalfBuilder\r\n\r\n## FSALPS OUTPUT  - Feature evolution in Layers\r\n\r\n![FSALPS Layer 0](http://greyintel.org/resources/img/works/fsalps/freq/0.png)\r\n\r\n![FSALPS Layer 4](http://greyintel.org/resources/img/works/fsalps/freq/4.png)\r\n\r\n![FSALPS Layer 6](http://greyintel.org/resources/img/works/fsalps/freq/6.png)\r\n\r\n![FSALPS Layer 9](http://greyintel.org/resources/img/works/fsalps/freq/9.png)\r\n\r\n### Authors and Contributors\r\nAnthony Awuley @aawuley\r\n\r\n### Support or Contact\r\nHaving trouble with setting up? Check out our [documentation](https://github.com/aawuley/alps-ec) or [contact support](mail:aawuley@gmail.com).",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}
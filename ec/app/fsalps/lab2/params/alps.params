# Copyright 2014 by Anthony Awuley and Brock University
# Licensed under the Academic Free License version 3.0
# See the file "LICENSE" for more information

parent.0                = ../../../../gp/koza/koza.params
quit-on-run-complete    = false

#jobs specifies the number of runs you would wish to perform
state                   = ec.alps.SimpleEvolutionState
finish                  = ec.simple.SimpleFinisher
exch                    = ec.simple.SimpleExchanger
breed                   = ec.alps.SimpleBreeder
eval                    = ec.alps.SimpleEvaluator
stat                    = ec.alps.SimpleStatistics
init                    = ec.alps.fsalps.GPInitializerALPS
pop                     = ec.Population
jobs                    = 1
pop.subpops             = 1
pop.subpop.0.size       = 1000
select.tournament.size  = 4
breed.elite.0           = 3
breedthreads            = 1
evalthreads             = 1
seed.0                  = 1
quit-on-run-complete    = false
generations             = 100



# ALPS configuration
alps.age-gap                     = 5
alps.number-of-layers            = 5
alps.number-of-evaluations       = 100
alps.aging-scheme                = ec.alps.agingscheme.Polynomial
alps.layer-replacement           = ec.alps.replacement.ReverseTournamentWorst
alps.selection-pressure          = 0.8
alps.tournament.size             = 4


# FSALPS 
#use only default node probability
alps.use-only-default-node-pr    = false
#used to determine if frequency count is used during mutation
alps.fsalps-in-mutation          = true
#used to determine if frequency count is used during mutation
alps.fsalps-last-layer-gen-freq-count = false



############################## ec.gp.koza.koza.params ##############################

# Point Mutation will use Tournament Selection, try only 1
# time, have a max depth of 17, and use KozaNodeSelector
# and GROW for building.  Also, Point Mutation uses a GrowBuilder
# by default, with a default of min-depth=max-depth=5
# as shown a ways below
gp.koza.mutate.source.0      = ec.select.TournamentSelection
gp.koza.mutate.ns.0          = ec.gp.koza.KozaNodeSelector
gp.koza.mutate.build.0       = ec.alps.gp.koza.GrowBuilder
gp.koza.mutate.maxdepth      = 17
# This is the default for Koza and lil-gp, though it's
# a little wimpy; on the other hand, a higher number can
# make things really slow
gp.koza.mutate.tries         = 1


# The tree uses an ec.gp.koza.HalfBuilder to create
# itself initially.
# HalfBuilder will pick GROW half the time and FULL
# the other half, with a ramp from 2 to 6 inclusive.
# By ramp we mean that it first picks a random number between
# 2 and 6 inclusive.  This then becomes the *maximum* tree size
# (for the FULL approach, it's the tree size of the tree, for
# GROW, the tree can get no bigger than this)

gp.tc.0.init                 = ec.alps.gp.koza.HalfBuilder

# We set the default for HalfBuilder to be a ramp of 2--6,
# with a grow probability of 0.5
gp.koza.half.min-depth       = 2
gp.koza.half.max-depth       = 6
gp.koza.half.growp           = 0.5

###################################################################################



pop.subpop.0.species.pipe                        = ec.breed.MultiBreedingPipeline
pop.subpop.0.species.pipe.num-sources            = 2
pop.subpop.0.species.pipe.source.0               = ec.alps.gp.breed.CrossoverALPS
pop.subpop.0.species.pipe.source.0.source.0      = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.0.source.1      = same
pop.subpop.0.species.pipe.source.0.ns.0          = ec.gp.koza.KozaNodeSelector
pop.subpop.0.species.pipe.source.0.ns.1          = same
pop.subpop.0.species.pipe.source.0.maxdepth      = 17
pop.subpop.0.species.pipe.source.0.tries         = 1
pop.subpop.0.species.pipe.source.0.source.0.size = 7
pop.subpop.0.species.pipe.source.0.source.1.size = 7
pop.subpop.0.species.pipe.source.0.prob          = 1.0

pop.subpop.0.species.pipe.source.1               = ec.alps.gp.breed.MutationALPS
pop.subpop.0.species.pipe.source.0.source.0      = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.0.source.0.size = 7
pop.subpop.0.species.pipe.source.1.prob          = 0.0


#Node Selectors
gp.koza.ns.terminals                             = 0.1
gp.koza.ns.nonterminals                          = 0.9
gp.koza.ns.root                                  = 0.0


# the next four items are already defined in koza.params, but we
# put them here to be clear.
gp.koza.mutate.source.0 = ec.select.TournamentSelection

# We have one function set, of class GPFunctionSet
gp.fs.size              = 1
gp.fs.0                 = ec.alps.fsalps.GPFunctionSetALPS
# We'll call the function set "f0".
gp.fs.0.name            = f0

# We have five functions in the function set.  They are:
gp.fs.0.size            = 5
gp.fs.0.func.0          = ec.app.fsalps.lab2.ts.X
gp.fs.0.func.0.nc       = nc0
gp.fs.0.func.0.pr       = 10
gp.fs.0.func.1          = ec.app.fsalps.lab2.ts.Y
gp.fs.0.func.1.nc       = nc0
gp.fs.0.func.1.pr       = 1
gp.fs.0.func.2          = ec.app.fsalps.lab2.fs.Add
gp.fs.0.func.2.nc       = nc2
gp.fs.0.func.3          = ec.app.fsalps.lab2.fs.Sub
gp.fs.0.func.3.nc       = nc2
gp.fs.0.func.4          = ec.app.fsalps.lab2.fs.Mul
gp.fs.0.func.4.nc       = nc2

eval.problem            = ec.app.fsalps.lab2.MultiValuedRegression
eval.problem.data       = ec.app.fsalps.lab2.DoubleData

#Specification of output statistics files
stat                    = ec.alps.SimpleShortStatistics
stat.file               = ../output/out.stats

stat.num-children       = 2
stat.child.0            = ec.alps.SimpleStatistics
stat.child.0.file       = ../output/ind.stats

stat.child.1            = ec.alps.NodeSimpleStatistics
stat.child.1.file       = ../output/node.stats

# Copyright 2015 by Anthony Awuley 
# Brock University Computer Science Department
# Licensed under the Academic Free License version 3.0
# See the file "LICENSE" for more information



#jobs specifies the number of runs you would wish to perform
state                                 = ec.alps.GenEvolutionState
breed                                 = ec.alps.ALPSBreeder
eval                                  = ec.alps.ALPSEvaluator
stat                                  = ec.alps.statistics.ALPSStatistics



#Begin ALPS configuration ==============================================================
alps.age-gap                           = 5
alps.number-of-layers                  = 5
alps.number-of-evaluations             = 2000
alps.selection-pressure                = 0.8
alps.tournament-size                   = 4
alps.aging-scheme                      = ec.alps.layers.agingscheme.Polynomial
alps.layer-replacement                 = ec.alps.layers.replacement.ReverseTournamentWorst
alps.assign-max-parent-age             = true

# when using selection pressure, individual aging isnt uniform especially when parents are selected from lower
# layer. When some individuals are aged faster than others, a population will contain less than expected required number
# ECJ by default breeds a maximum of the number of populations contained in a population.
alps.always-breed-maximum-population   = true

#when true, only individuals selected from breeding from current layer have their age increased
#else both both individuals coming from current and lower layer used as parents will have their age increased
alps.age-only-current-layer            = true

# when moving old individuals from bottom layer to next higher layer, use this flag to determine
# replacement strategy in higher layer. if false lower layer individual only replace higher layer tournament individual
# if its fitness is better that of the higher layer tournament individual. if true, selected tournament individual from higher
# layer is always replaced
alps.layer-replacement.replace-weakest = true

#END================================================================================= 


#Begin GP parameters ================================================================

pop.subpop.0.species.pipe                        = ec.alps.gp.ALPSMultiBreedingPipeline
pop.subpop.0.species.pipe.num-sources            = 2
pop.subpop.0.species.pipe.source.0               = ec.alps.gp.breed.Crossover
pop.subpop.0.species.pipe.source.0.source.0      = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.0.source.1      = same
pop.subpop.0.species.pipe.source.0.ns.0          = ec.gp.koza.KozaNodeSelector
pop.subpop.0.species.pipe.source.0.ns.1          = same
pop.subpop.0.species.pipe.source.0.maxdepth      = 17
pop.subpop.0.species.pipe.source.0.tries         = 1
pop.subpop.0.species.pipe.source.0.source.0.size = 4
pop.subpop.0.species.pipe.source.0.source.1.size = 4
pop.subpop.0.species.pipe.source.0.prob          = 0.90

pop.subpop.0.species.pipe.source.1               = ec.alps.gp.breed.Mutation
pop.subpop.0.species.pipe.source.0.source.0      = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.0.source.0.size = 4
pop.subpop.0.species.pipe.source.1.prob          = 0.10

#Node Selectors
gp.koza.ns.terminals                             = 0.1
gp.koza.ns.nonterminals                          = 0.9
gp.koza.ns.root                                  = 0.0
#END================================================================================= 

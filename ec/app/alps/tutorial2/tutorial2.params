# Generational ALPS GP Tutorial 2
# Copyright 2015 by Anthony Awuley
# Brock University - Computer Science Department
# Licensed under the Academic Free License version 3.0
# See the file "LICENSE" for more information

parent.0                = ../../../gp/koza/koza.params

#Begin ALPS configuration ==============================================================
parent.1                = ../../../alps/alps.params
#END================================================================================= 

quit-on-run-complete    = false

#jobs specifies the number of runs you would wish to perform
state                   = ec.alps.GenEvolutionState
finish                  = ec.simple.SimpleFinisher
exch                    = ec.simple.SimpleExchanger
breed                   = ec.alps.ALPSBreeder
eval                    = ec.alps.ALPSEvaluator
stat                    = ec.alps.statistics.ALPSStatistics
init                    = ec.gp.GPInitializer
pop                     = ec.Population
jobs                    = 1
pop.subpops             = 1
pop.subpop.0.size       = 50
select.tournament.size  = 7
breed.elite.0           = 3
breedthreads            = 1
evalthreads             = 1
seed.0                  = 1
evaluations             = 200000
# cross-validation-size   = 20


#================================ ALPS configuration ================================ 
alps.age-gap                           = 5
alps.number-of-layers                  = 5
alps.selection-pressure                = 0.8
alps.tournament-size                   = 4
alps.aging-scheme                      = ec.alps.layers.agingscheme.Polynomial
alps.layer-replacement                 = ec.alps.layers.replacement.ReverseTournamentWorst
alps.assign-max-parent-age             = true

# when using selection pressure, individual aging isnt uniform especially when parents are selected from lower
# layer. When some individuals are aged faster than others, a population will contain less than expected required number
# ECJ by default breeds a maximum of the number of populations contained in a population.
alps.always-breed-maximum-population   = true

#when true, only individuals selected from breeding from current layer have their age increased
#else both both individuals coming from current and lower layer used as parents will have their age increased
alps.age-only-current-layer            = true

# when moving old individuals from bottom layer to next higher layer, use this flag to determine
# replacement strategy in higher layer. if false lower layer individual only replace higher layer tournament individual
# if its fitness is better that of the higher layer tournament individual. if true, selected tournament individual from higher
# layer is always replaced
alps.layer-replacement.replace-weakest = true
#==================================================================================== 




#FUNCTION SETS=======================================================================
 
# We have one function set, of class GPFunctionSet
gp.fs.size                 = 1
gp.fs.0                    = ec.gp.GPFunctionSet
# We'll call the function set "f0".
gp.fs.0.name               = f0

# We have five functions in the function set.  They are:
gp.fs.0.size               = 5
gp.fs.0.func.0             = ec.app.alps.tutorial2.ts.X
gp.fs.0.func.0.nc          = nc0
gp.fs.0.func.1             = ec.app.alps.tutorial2.ts.Y
gp.fs.0.func.1.nc          = nc0
gp.fs.0.func.2             = ec.app.alps.tutorial2.fs.Add
gp.fs.0.func.2.nc          = nc2
gp.fs.0.func.3             = ec.app.alps.tutorial2.fs.Sub
gp.fs.0.func.3.nc          = nc2
gp.fs.0.func.4             = ec.app.alps.tutorial2.fs.Mul
gp.fs.0.func.4.nc          = nc2

eval.problem               = ec.app.alps.tutorial2.MultiValuedRegression
eval.problem.data          = ec.app.alps.tutorial2.DoubleData

stat.num-children           = 4
stat.child.0                = ec.alps.statistics.ShortStatistics
stat.child.0.gather-full    = true
stat.child.0.file           = output/cmtrx.stats
stat.child.1                = ec.alps.statistics.ALPSStatistics
stat.child.1.silent.print   = true
stat.child.1.file           = output/ss.stats
stat.child.2                = ec.alps.statistics.NodeStatistics
stat.child.2.silent.print   = true
stat.child.2.file           = output/node.stats
stat.child.3                = ec.alps.statistics.ShortStatistics
stat.child.3.gather-full    = true
stat.child.3.silent.print   = true
stat.child.3.file           = output/total.stats
